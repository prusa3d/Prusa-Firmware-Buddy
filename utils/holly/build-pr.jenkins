pipeline {
    agent {
        dockerfile {
            filename 'utils/holly/Dockerfile'
            additionalBuildArgs '-t prusa-firmware-buddy'
        }
    }

    parameters {
        string(name: 'VERSION_SUFFIX', defaultValue: '<default>', description: 'Specify custom version suffix for the build (e.g. "-RC1+1010"). Set to "<default>" to use the default one. Leave empty to make a final-version build without any suffix.')
        string(name: 'VERSION_SUFFIX_SHORT', defaultValue: '<default>', description: 'Specify custom version suffix for the build (e.g. "-RC1"). Set to "<default>" to use the default one. Leave empty to make a final-version build without any suffix.')
    }

    options {
        copyArtifactPermission('/Prusa-Firmware-Buddy/*')
    }

    stages {
        stage('Prepare Build Stages') {
            steps {
                script {
                    // required configurations
                    def configurations = [
                        [printer: "mini", build_type: "release", bootloader: "no"],
                        [printer: "mini", build_type: "release", bootloader: "empty"],
                        [printer: "mini", build_type: "release", bootloader: "yes"],
                    ]

                    // prepare version suffix
                    def commit_nr = sh(script: 'git rev-list HEAD --count', returnStdout: true).trim()
                    def short_suffix
                    def full_suffix
                    if (env.CHANGE_ID) {
                        // This is a PR build
                        short_suffix = "-BETA+${commit_nr}"
                        full_suffix = "${short_suffix}.PR${env.CHANGE_ID}.B${env.BUILD_NUMBER}"
                    } else if (env.BRANCH_NAME.startsWith("RELEASE-")) {
                        // This is an RC build
                        short_suffix = "-RC+${commit_nr}"
                        full_suffix = "${short_suffix}.B${env.BUILD_NUMBER}"
                    } else {
                        // This is build of an ordinary branch (not a release branch)
                        short_suffix = "-BETA+${commit_nr}"
                        def branch_spec = env.BRANCH_NAME.replaceAll("_", "-")
                        full_suffix = "${short_suffix}.BRANCH-${branch_spec}.B${env.BUILD_NUMBER}"
                    }

                    if (params.VERSION_SUFFIX != '<default>') {
                        full_suffix = params.VERSION_SUFFIX
                    }
                    if (params.VERSION_SUFFIX_SHORT != '<default>') {
                        short_suffix = params.VERSION_SUFFIX_SHORT
                    }

                    // create the build stages
                    configurations.each { config ->
                        stage("Build - ${config.printer},${config.build_type},${config.bootloader}boot") {
                            sh """
                                python utils/build.py \
                                    --printer ${config.printer} \
                                    --build-type ${config.build_type} \
                                    --bootloader ${config.bootloader} \
                                    --generate-bbf \
                                    --generate-dfu \
                                    --no-store-output \
                                    --version-suffix=${full_suffix} \
                                    --version-suffix-short=${short_suffix} \
                                    -DCUSTOM_COMPILE_OPTIONS:STRING=-Werror
                            """
                        }
                    }
                }
            }
        }

        stage('Check Formatting') {
            when {
                expression { env.CHANGE_TARGET }
            }
            steps {
                sh "pip install pre-commit"
                sh "pre-commit install"
                sh """pre-commit run \
                    --source remotes/origin/${env.CHANGE_TARGET} \
                    --origin HEAD \
                    --show-diff-on-failure \
                    --hook-stage manual
                """
            }
        }
    }

    post {
        always {
            // archive build products
            archiveArtifacts artifacts: 'build/products/*', fingerprint: true
        }
        cleanup {
            deleteDir()
        }
    }
}
